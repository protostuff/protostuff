// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff-me.proto

package com.dyuproject.protostuff.me;

import java.io.IOException;

public final class ClubFounder implements Message, Schema {

    public static Schema getSchema() {
        return DEFAULT_INSTANCE;
    }

    public static ClubFounder getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final ClubFounder DEFAULT_INSTANCE = new ClubFounder();


    private String name;
    private Club club;

    public ClubFounder() {

    }

    // getters and setters

    // name

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // club

    public Club getClub() {
        return club;
    }

    public void setClub(Club club) {
        this.club = club;
    }

    // message method

    public Schema cachedSchema() {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Object /*ClubFounder*/ newMessage() {
        return new ClubFounder();
    }

    public Class typeClass() {
        return ClubFounder.class;
    }

    public String messageName() {
        return "ClubFounder";
    }

    public String messageFullName() {
        return ClubFounder.class.getName();
    }

    public boolean isInitialized(Object /*ClubFounder*/ message) {
        return true;
    }

    public void mergeFrom(Input input, Object /*ClubFounder*/ messageObj) throws IOException {
        ClubFounder message = (ClubFounder) messageObj;
        for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
            switch (number) {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;

                case 2:
                    message.club = (Club) input.mergeObject(message.club, Club.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }

    public void writeTo(Output output, Object /*ClubFounder*/ messageObj) throws IOException {
        ClubFounder message = (ClubFounder) messageObj;
        if (message.name != null)
            output.writeString(1, message.name, false);


        if (message.club != null)
            output.writeObject(2, message.club, Club.getSchema(), false);

    }

    public String getFieldName(int number) {
        switch (number) {
            case 1:
                return "name";
            case 2:
                return "club";
            default:
                return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = (Integer) __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.Hashtable __fieldMap = new java.util.Hashtable();

    static {
        __fieldMap.put("name", new Integer(1));
        __fieldMap.put("club", new Integer(2));
    }

    static final Pipe.Schema PIPE_SCHEMA = new Pipe.Schema(DEFAULT_INSTANCE) {
        protected void transfer(Pipe pipe, Input input, Output output) throws IOException {
            for (int number = input.readFieldNumber(wrappedSchema); ; number = input.readFieldNumber(wrappedSchema)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        input.transferByteRangeTo(output, true, number, false);
                        break;

                    case 2:
                        output.writeObject(number, pipe, Club.getPipeSchema(), false);
                        break;

                    default:
                        input.handleUnknownField(number, wrappedSchema);
                }
            }
        }
    };

    public static Pipe.Schema getPipeSchema() {
        return PIPE_SCHEMA;
    }

}
